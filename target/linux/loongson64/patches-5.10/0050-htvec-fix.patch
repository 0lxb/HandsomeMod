From f07ea17ac05c19d42b1fd83206cf27d5ae41567c Mon Sep 17 00:00:00 2001
From: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date: Tue, 28 Apr 2020 13:56:01 +0800
Subject: [PATCH 50/81] htvec fix

Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
---
 drivers/irqchip/irq-loongson-htvec.c | 64 ++++++++++++++--------------
 1 file changed, 31 insertions(+), 33 deletions(-)

diff --git a/drivers/irqchip/irq-loongson-htvec.c b/drivers/irqchip/irq-loongson-htvec.c
index e155ebb99e..01bdc08f52 100644
--- a/drivers/irqchip/irq-loongson-htvec.c
+++ b/drivers/irqchip/irq-loongson-htvec.c
@@ -28,16 +28,16 @@
 #define VEC_REG_BIT(irq_id)	((irq_id) % VEC_COUNT_PER_REG)
 
 struct htvec {
-	void __iomem *base;
-	struct irq_domain *htvec_domain;
-	raw_spinlock_t htvec_lock;
+	void __iomem		*base;
+	struct irq_domain	*htvec_domain;
+	raw_spinlock_t		htvec_lock;
 };
 
 static void htvec_irq_dispatch(struct irq_desc *desc)
 {
 	struct htvec *priv = irq_desc_get_handler_data(desc);
 	struct irq_chip *chip = irq_desc_get_chip(desc);
-	uint32_t pending;
+	u32 pending;
 	bool handled = false;
 	int i;
 
@@ -45,13 +45,12 @@ static void htvec_irq_dispatch(struct irq_desc *desc)
 
 	for (i = 0; i < VEC_REG_COUNT; i++) {
 		pending = readl(priv->base + 4 * i);
-		/* Ack all IRQs at once, otherwise IRQ flood might happen */
 		writel(pending, priv->base + 4 * i);
 		while (pending) {
 			int bit = __ffs(pending);
 
 			generic_handle_irq(irq_linear_revmap(priv->htvec_domain,
-						bit + 32 * i));
+						bit + VEC_COUNT_PER_REG * i));
 			pending &= ~BIT(bit);
 			handled = true;
 		}
@@ -63,43 +62,42 @@ static void htvec_irq_dispatch(struct irq_desc *desc)
 	chained_irq_exit(chip, desc);
 }
 
-static void htvec_bitset(void __iomem *addr, int bit)
+static void htvec_ack_irq(struct irq_data *d)
 {
-	u32 reg;
-
-	addr += VEC_REG_IDX(bit) * 4;
-	reg = readl(addr);
-	reg |= BIT(VEC_REG_BIT(bit));
-	writel(reg, addr);
-}
-
-static void htvec_bitclr(void __iomem *addr, int bit)
-{
-	u32 reg;
+	struct htvec *priv = irq_data_get_irq_chip_data(d);
+	void __iomem *addr = priv->base;
 
-	addr += VEC_REG_IDX(bit) * 4;
-	reg = readl(addr);
-	reg &= ~BIT(VEC_REG_BIT(bit));
-	writel(reg, addr);
+	addr += VEC_REG_IDX(d->hwirq) * 4;
+	writel(VEC_REG_BIT(d->hwirq), addr);
 }
 
 static void htvec_mask_irq(struct irq_data *d)
 {
 	struct htvec *priv = irq_data_get_irq_chip_data(d);
+	void __iomem *addr = priv->base + HTVEC_EN_OFF;
 	unsigned long flags;
+	u32 reg;
 
 	raw_spin_lock_irqsave(&priv->htvec_lock, flags);
-	htvec_bitclr(priv->base + HTVEC_EN_OFF, d->hwirq);
+	addr += VEC_REG_IDX(d->hwirq) * 4;
+	reg = readl(addr);
+	reg &= ~BIT(VEC_REG_BIT(d->hwirq));
+	writel(reg, addr);
 	raw_spin_unlock_irqrestore(&priv->htvec_lock, flags);
 }
 
 static void htvec_unmask_irq(struct irq_data *d)
 {
 	struct htvec *priv = irq_data_get_irq_chip_data(d);
+	void __iomem *addr = priv->base + HTVEC_EN_OFF;
 	unsigned long flags;
+	u32 reg;
 
 	raw_spin_lock_irqsave(&priv->htvec_lock, flags);
-	htvec_bitset(priv->base + HTVEC_EN_OFF, d->hwirq);
+	addr += VEC_REG_IDX(d->hwirq) * 4;
+	reg = readl(addr);
+	reg |= BIT(VEC_REG_BIT(d->hwirq));
+	writel(reg, addr);
 	raw_spin_unlock_irqrestore(&priv->htvec_lock, flags);
 }
 
@@ -107,6 +105,7 @@ static struct irq_chip htvec_irq_chip = {
 	.name			= "LOONGSON_HTVEC",
 	.irq_mask		= htvec_mask_irq,
 	.irq_unmask		= htvec_unmask_irq,
+	.irq_ack		= htvec_ack_irq,
 };
 
 static int htvec_domain_alloc(struct irq_domain *domain, unsigned int virq,
@@ -114,13 +113,13 @@ static int htvec_domain_alloc(struct irq_domain *domain, unsigned int virq,
 {
 	struct htvec *priv = domain->host_data;
 	unsigned long hwirq;
-	unsigned int type;
+	unsigned int type, i;
 
 	irq_domain_translate_onecell(domain, arg, &hwirq, &type);
 
-	/* Not much to do, just setup the irqdata */
-	irq_domain_set_hwirq_and_chip(domain, virq, hwirq,
-					&htvec_irq_chip, priv);
+	for (i = 0; i < nr_irqs; i++)
+		irq_domain_set_info(domain, virq + i, hwirq + i, &htvec_irq_chip,
+					priv, handle_edge_irq, NULL, NULL);
 
 	return 0;
 }
@@ -139,9 +138,9 @@ static void htvec_domain_free(struct irq_domain *domain, unsigned int virq,
 }
 
 static const struct irq_domain_ops htvec_domain_ops = {
-	.translate = irq_domain_translate_onecell,
-	.alloc	= htvec_domain_alloc,
-	.free	= htvec_domain_free,
+	.translate	= irq_domain_translate_onecell,
+	.alloc		= htvec_domain_alloc,
+	.free		= htvec_domain_free,
 };
 
 static void htvec_reset(struct htvec *priv)
@@ -199,10 +198,9 @@ static int htvec_of_init(struct device_node *node,
 
 	htvec_reset(priv);
 
-	for (i = 0; i < num_parents; i++) {
+	for (i = 0; i < num_parents; i++)
 		irq_set_chained_handler_and_data(parent_irq[i],
 						htvec_irq_dispatch, priv);
-	}
 
 	return 0;
 
-- 
2.31.1

